/* 
 * File:   GLFWInputFactory.h
 * Author: chris
 *
 * Created on May 26, 2014, 5:00 PM
 */

#ifndef AGLFWINPUTFACTORY_H
#define	AGLFWINPUTFACTORY_H

//#include "../InputFactory.h"

#include <GLFW/glfw3.h>
#include <string>

namespace INPUT {
    namespace GLFW {
        /*namespace GLFWInputFactory_CONST {
            const int MAX_JOYSTICKS = 4;
        }*/
        class GLFWInputFactory/* : public INPUT::InputFactory */{
            /*struct Joystick_State {
                Joystick_State(std::string joy_name, int nButtons, int nAxes)
                : name(joy_name)
                , buttonState(0)
                , axesState(0) {
                    buttonState = new char[nButtons];
                    axesState = new float[nAxes];
                    for(int i = 0; i < nButtons; i++)
                        buttonState[i] = 0;
                    for(int i = 0; i < nAxes; i++)
                        axesState[i] = 0;                    
                }
                char* buttonState;
                int noOfButtons;
                float* axesState;
                int noOfAxes;
                std::string name;
            };*/
        public:
            GLFWInputFactory();
            virtual ~GLFWInputFactory();
            virtual void init();
            virtual void processEvents();

            static void cursorPositionCallback(GLFWwindow * m_pWindow, double x, double y);
            static void mouseButtonCallback(GLFWwindow * m_pWindow, int button, int action, int mods);


        private:
            //Joystick_State* m_joystickStates[GLFWInputFactory_CONST::MAX_JOYSTICKS];
        };
    }
}
#endif	/* AGLFWINPUTFACTORY_H */

